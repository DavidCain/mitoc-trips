const BundleTracker = require("webpack-bundle-tracker");

const config = {
  lintOnSave: false,
  // Include the full runtime compiler, which will allow us to parse outerHTML
  // (Which is necessary on our entrypoint #root, where we read server-generated HTML)
  // See:
  // - https://vuejs.org/v2/guide/instance.html#Lifecycle-Diagram
  // - https://vuejs.org/v2/guide/installation.html#Runtime-Compiler-vs-Runtime-only
  runtimeCompiler: true,

  // Note that this corresponds to `path`
  // From https://cli.vuejs.org/guide/webpack.html#simple-configuration
  // "instead of modifying output.path, you should use the outputDir option in vue.config.js"
  outputDir: "./dist/",

  chainWebpack: (config) => {
    config.optimization.splitChunks(false);
    config
      .plugin("BundleTracker")
      .use(BundleTracker, [{ filename: "../frontend/webpack-stats.json" }]);
    config.resolve.alias.set("__STATIC__", "static");
    config.devServer
      .public("http://0.0.0.0:8080")
      .host("0.0.0.0")
      .port(8080)
      .hotOnly(true)
      .watchOptions({ poll: 1000 })
      .https(false)
      .headers({ "Access-Control-Allow-Origin": ["*"] });
    // Disable the creation of frontend/index.html (we're not using a SPA)
    // https://cli.vuejs.org/guide/html-and-static-assets.html#disable-index-generation
    config.plugins.delete("html");
    config.plugins.delete("preload");
    config.plugins.delete("prefetch");
  },
};

if (process.env.NODE_ENV === "development") {
  // Locally, we want to use `npm run serve` to run a development server
  config.publicPath = "http://0.0.0.0:8080/";
} else {
  // In production, we'll serve static files generated by `npm run build` through NGINX.
  config.publicPath = "/static/frontend/";
}

module.exports = config;
