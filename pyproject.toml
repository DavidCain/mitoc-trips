[tool.ruff]
lint.select = [
  "A",     # flake8-builtins
  "ANN",   # flake8-annotations
  "ARG",   # flake8-unused-arguments
  "ASYNC", # flake8-async
  "B",     # flake8-bugbear
  "BLE",   # flake8-blind-except
  "C4",    # flake8-comprehensions
  "C90",   # mccabe
  "COM",   # flake8-commas
  "DJ",    # flake8-django
  "DTZ",   # flake8-datetimez
  "E",     # pycodestyle error
  "TD",    # flake8-todos
  "EXE",   # flake8-executable
  "F",     # Pyflakes
  "FA",    # flake8-future-annotations
  "G",     # flake8-logging-format
  "I",     # isort
  "ICN",   # flake8-import-conventions
  "INP",   # flake8-no-pep420
  "INT",   # flake8-gettext
  "ISC",   # flake8-implicit-str-concat
  "N",     # pep8-naming
  "PGH",   # pygrep-hooks
  "PIE",   # flake8-pie
  "PLC",   # pylint convention
  "PLE",   # pylint error
  "PLR",   # pylint refactor
  "PLW",   # pylint warning
  "PT",    # flake8-pytest-style
  "PYI",   # flake8-pyi
  "RET",   # flake8-return
  "RSE",   # flake8-raise
  "RUF",   # Ruff-specific rules
  "S",     # flake8-bandit
  "SIM",   # flake8-simplify
  "SLF",   # flake8-self
  "T10",   # flake8-debugger
  "T20",   # flake8-print
  "TCH",   # flake8-type-checking
  "TID",   # flake8-tidy-imports
  "TRY",   # tryceratops
  "UP",    # pyupgrade
  "W",     # pycodestyle warning
  "YTT",   # flake8-2020

  # Docstring normalization
  "D404",  # Don't start docstrings with "This"
  "D200",  # One-line docstrings on one line
  "D210",  # No superfluous whitespace
  "D212",  # Multi-line docstrings start on first line

  # Interesting, should perhaps turn on later:
  # "PTH",  # flake8-use-pathlib
  # "FLY",  # flynt

  # Intentionally omitted:
  # "Q",     # flake8-quotes        -- we let the formatter handle quotes.
  # "FBT",   # flake8-boolean-trap  -- I'm fine with boolean traps
  # "ERA",   # eradicate            -- has tons of false-positives on commented "code"
  # "EM",    # flake8-errmsg        -- I'm fine with strings directly in exceptions
  # "PD",    # pandas-vet           -- I don't use pandas
  # "NPY",   # NumPy-specific rules -- I don't use numpy
]

lint.ignore = [
  # Specific rules ignored from checkers I otherwise view as valuable:
  "ANN001",   # Type annotations are knowingly incomplete.
  "ANN002",   # Type annotations are knowingly incomplete.
  "ANN003",   # Type annotations are knowingly incomplete.
  "ANN101",   # Type annotations are knowingly incomplete.
  "ANN102",   # Type annotations are knowingly incomplete.
  "ANN201",   # Type annotations are knowingly incomplete.
  "ANN202",   # Type annotations are knowingly incomplete.
  "ANN204",   # Type annotations are knowingly incomplete.
  "ANN205",   # Type annotations are knowingly incomplete.
  "ANN401",   # Type annotations are knowingly incomplete.
  "ARG001",   # Unused arguments are common when inheriting with `*args, **kwargs`.
  "ARG002",   # Unused arguments are common when inheriting with `*args, **kwargs`.
  "D100",     # Not all public classes need docstrings.
  "D101",     # Not all public classes need docstrings.
  "D102",     # Not all public methods need docstrings.
  "D107",     # Not all `__init__` methods need docstrings.
  "N806",     # Function arguments are frequently uppercase in migrations.
  "PLR2004",  # Tests & simple logic extensively use "magic values"
  "PT009",    # I intentionally use `unittest`-style tests.
  "PT019",    # I don't use pytest fixtures.
  "PT027",    # I don't use pytest.raises
  "S101",     # Using `assert` is fine (I run with them enabled).
  "S311",     # I use RNGs but they're not for cryptography purposes.
  "SIM117",   # Multiple `with` statements can aid readability
  "TD002",    # This is a solo project -- I authored all the TODOs.
  "TD003",    # This is a solo project -- I don't track issues.
  "TRY003",   # I don't mind specifying messages in the exception raise.

  # Errors which I'll plan to fix soon:
  "DJ001",    # Avoid nullable charfields
  "RUF012",   # I should make better use of ClassVar and Final

  # Errors that conflict with `ruff format`
  "ISC001",
  "COM812",   # Formatter manages commas.
  "E501",     # Formatter manages line length.
]

# By default, `ruff` will respect `.gitignore`
# However, we can/should be explicit about excluded directories for CI
exclude = [
  ".venv/",
  "node_modules/",
  "static/",
]

lint.fixable = ["ALL"]
lint.unfixable = []

[tool.ruff.lint.flake8-self]
ignore-names = [
  "_asdict",
  "_replace",
  "_fields",
  "_meta",
]

[project]
# When poetry full supports PEP 621, should migrate more information here!
# See: https://github.com/python-poetry/roadmap/issues/3
name = "ws"
requires-python = "~=3.10"  # Keep in sync with Poetry

[tool.poetry]
name = "ws"
version = "0.1.0"
description = "The MIT Outing Club's trip management system"
license = "GPL-3.0"
readme = "README.md"
homepage = "https://mitoc-trips.mit.edu"
repository = "https://github.com/DavidCain/mitoc-trips/"
authors = ["David Cain <davidjosephcain@gmail.com>"]

[tool.poetry.dependencies]
python = "^3.10.0"

[tool.poetry.group.prod.dependencies]
Django = "^3.2"
PyJWT = ">= 2.0.0"  # 2.0.0 changed the return type of `jwt.encode()`
beautifulsoup4 = "*"
celery = "^5.1"
django-allauth = ">= 0.41.0"  # See CVE-2019-19844
django-cors-headers = "*"
django-crispy-forms = "^1.12.0"
django-phonenumber-field = { version = ">= 2.0", extras = ["phonenumberslite"] }
django-pipeline = "*"  # TODO: To eventually be replaced by webpack-loader
django-smtp-ssl = "*"
django-webpack-loader = "^1.1.0"  # Should maintain parity with frontend/package.json
gspread = "*"
markdown2 = "*"
mitoc-const = "^1.0.0"  # (1.0.0 includes type hints)
phonenumberslite = "*"
psycopg2 = "*"
pwned-passwords-django = "*"
requests = "*"
sentry-sdk = "^1.30.0"
setuptools = "^69.5.1"  # Required by django-pipeline in prod!
gunicorn = "^22.0.0"


[tool.poetry.group.test.dependencies]
coverage = { version = "*" }
factory_boy = "*"
freezegun = "*"
lxml = "*"
pytest = "*"
pytest-django = "*"
pytest-socket = "*"
responses = "*"

[tool.poetry.group.lint]
optional = true
[tool.poetry.group.lint.dependencies]
pylint = "^3.0"
ruff = "*"

[tool.poetry.group.mypy]
optional = true
[tool.poetry.group.mypy.dependencies]
celery-types = "^0.19.0"
django-stubs = { version = "*" }
mypy = { version = "*"}
types-certifi = { version = "*" }
types-cryptography = { version = "*" }
types-requests = { version = "*" }

# Dependencies helpful for local development, not used otherwise
[tool.poetry.group.localdev]
optional = true
[tool.poetry.group.localdev.dependencies]
django-debug-toolbar = { version = "*" }
ipdb = { version = "*" }


[tool.mypy]
python_version = "3.10"
plugins = ["mypy_django_plugin.main"]

# Better errors
pretty = true
show_error_codes = true
show_column_numbers = true

# Default into *all* strict settings
strict = true

# Strict settings we cannot yet turn on
check_untyped_defs = false
disallow_any_generics = false
disallow_subclassing_any = false
disallow_untyped_defs = false

[[tool.mypy.overrides]]
# Explicitly ignore imports that do not have type hints or library stubs
# Periodically, it's worth checking in to see which of these may have types later!
# (After dropping support for Python versions before 3.5, it's easy to just type annotate directly
module = [
    "allauth.*",
    "bs4",
    "celery.*",
    "debug_toolbar",
    "factory.*",
    "freezegun",
    "gspread",
    "kombu.*",
    "localflavor.*",
    "markdown2",
    "phonenumber_field.*",
    "phonenumbers",
    "pipeline.*",
    "pwned_passwords_django.*",

]
ignore_missing_imports = true

[tool.django-stubs]
django_settings_module = "ws.settings"


[tool.pylint.'MESSAGES CONTROL']
disable = [
  "format",  # We use the ruff autoformatter

  "arguments-differ",
  "fixme",
  "invalid-name",
  "too-few-public-methods",
  "too-many-ancestors",
  "too-many-arguments",
  "too-many-public-methods",

  ################################
  # I might remove some of these #
  ################################
  "attribute-defined-outside-init",
  "duplicate-code",
  "no-member",
  "too-many-locals",

  ############################
  # I aspire to remove these #
  ############################
  "missing-docstring",
  "unused-argument",  # Currently quite common in method strings

  ####################################
  # We let ruff handle these instead #
  ####################################
  "logging-fstring-interpolation",
  "protected-access",
  "raise-missing-from",
  "ungrouped-imports",
  "wrong-import-order",
  "wrong-import-position",
]

[tool.pylint.REPORTS]
reports = false
score = false

[tool.pylint.FORMAT]
max-module-lines = 2000


[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "ws.settings"
filterwarnings = [
    "error",
    # This is issued by `django-pipeline`, itself deprecated
    "ignore:pkg_resources is deprecated as an API:DeprecationWarning",
]
