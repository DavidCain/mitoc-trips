# Generated by Django 3.2.21 on 2023-10-02 14:03

import django.contrib.postgres.indexes
import django.contrib.postgres.search
import django.core.validators
import django.db.migrations.operations.special
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models

import ws.utils.dates


def make_groups(apps, schema_editor):
    """Create groups that are expected by the software."""
    Group = apps.get_model('auth', 'Group')

    Group.objects.get_or_create(name='leaders')
    Group.objects.get_or_create(name='users_with_info')
    Group.objects.get_or_create(name='WSC')
    Group.objects.get_or_create(name='WIMP')

    # Created based off all activities in LeaderRating.CLOSED_ACTIVITES
    # (with "WSC" being a special case for the time being)
    Group.objects.get_or_create(name='biking_chair')
    Group.objects.get_or_create(name='boating_chair')
    Group.objects.get_or_create(name='cabin_chair')
    Group.objects.get_or_create(name='climbing_chair')
    Group.objects.get_or_create(name='hiking_chair')


def drop_perms(apps, schema_editor):
    """Delete all Permission objects.

    - These aren't in-use anyway
    - some refer to outdated dependencies (django-select2)
    - It's easy to re-create them later if we want them.

    Current permissions are basically (one per content type):
    - add
    - view
    - change
    - delete

    (In other words... CRUD)
    """
    # select count(*) from auth_user_user_permissions;  -- None in use!
    Permission = apps.get_model('auth', 'Permission')
    Permission.objects.all().delete()


def do_nothing(*args):
    return


class Migration(migrations.Migration):
    replaces = [
        ('ws', '0001_initial'),
        ('ws', '0002_participant_profile_last_updated'),
        ('ws', '0003_trip_wimp'),
        ('ws', '0004_cached_membership'),
        ('ws', '0005_trip_membership_required'),
        ('ws', '0006_participant_gravatar_opt_out'),
        ('ws', '0007_add_groups'),
        ('ws', '0008_distinctaccounts'),
        ('ws', '0009_unique_signups'),
        ('ws', '0010_alumni_affiliation'),
        ('ws', '0011_simplify_affiliate_label'),
        ('ws', '0012_new_prices'),
        ('ws', '0013_car_year_update'),
        ('ws', '0014_trip_markdown_description'),
        ('ws', '0015_lotteryadjustment'),
        ('ws', '0016_archive_applications'),
        ('ws', '0017_participant_insecure_password'),
        ('ws', '0018_participant_password_last_checked'),
        ('ws', '0019_2020_ws_application'),
        ('ws', '0020_typo_corrections'),
        ('ws', '0021_trip_program'),
        ('ws', '0022_add_trip_type'),
        ('ws', '0023_remove_trip_type_default'),
        ('ws', '0024_signups_close_at'),
        ('ws', '0025_winterschoolsettings_accept_applications'),
        ('ws', '0026_require_program_trip_type'),
        ('ws', '0027_update_trip_programs'),
        ('ws', '0028_vehicle_year_number'),
        ('ws', '0029_tripinfo_last_updated'),
        ('ws', '0030_worry_time'),
        ('ws', '0031_format_lazy_help'),
        ('ws', '0032_lotteryseparation'),
        ('ws', '0033_discounts_optional_ga_key'),
        ('ws', '0034_drop_permissions'),
        ('ws', '0035_bump_car_year_validator'),
        ('ws', '0036_par_user_id_fk'),
        ('ws', '0037_denormalize_hibp_passwords'),
        ('ws', '0038_rephrase_trip_options'),
        ('ws', '0039_send_reminder_email'),
        ('ws', '0040_car_year_and_driving_self'),
        ('ws', '0041_sor_rename'),
        ('ws', '0042_alter_trip_signups_open_at'),
        ('ws', '0043_trip_edit_revision'),
        ('ws', '0044_trip_last_updated_by'),
        ('ws', '0045_trip_search_vector_idx'),
        ('ws', '0046_trip_summary'),
        ('ws', '0047_populate_text_descriptions'),
        ('ws', '0048_ws_application_questions'),
        ('ws', '0049_yoga'),
        ('ws', '0050_trip_reimbursement'),
        ('ws', '0051_consistent_levels'),
        ('ws', '0052_terrain_level'),
        ('ws', '0053_index_key_trip_fields'),
        ('ws', '0054_allow_null_reminder_sent_at'),
        ('ws', '0055_discount_url_non_null'),
        ('ws', '0056_car'),
    ]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Car',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'license_plate',
                    models.CharField(
                        max_length=31,
                        validators=[
                            django.core.validators.RegexValidator(
                                '^[a-zA-Z0-9 ]*$',
                                'Only alphanumeric characters and spaces allowed',
                            )
                        ],
                    ),
                ),
                (
                    'state',
                    models.CharField(
                        choices=[
                            ('AL', 'Alabama'),
                            ('AK', 'Alaska'),
                            ('AZ', 'Arizona'),
                            ('AR', 'Arkansas'),
                            ('CA', 'California'),
                            ('CO', 'Colorado'),
                            ('CT', 'Connecticut'),
                            ('DE', 'Delaware'),
                            ('DC', 'District of Columbia'),
                            ('FL', 'Florida'),
                            ('GA', 'Georgia'),
                            ('HI', 'Hawaii'),
                            ('ID', 'Idaho'),
                            ('IL', 'Illinois'),
                            ('IN', 'Indiana'),
                            ('IA', 'Iowa'),
                            ('KS', 'Kansas'),
                            ('KY', 'Kentucky'),
                            ('LA', 'Louisiana'),
                            ('ME', 'Maine'),
                            ('MD', 'Maryland'),
                            ('MA', 'Massachusetts'),
                            ('MI', 'Michigan'),
                            ('MN', 'Minnesota'),
                            ('MS', 'Mississippi'),
                            ('MO', 'Missouri'),
                            ('MT', 'Montana'),
                            ('NE', 'Nebraska'),
                            ('NV', 'Nevada'),
                            ('NH', 'New Hampshire'),
                            ('NJ', 'New Jersey'),
                            ('NM', 'New Mexico'),
                            ('NY', 'New York'),
                            ('NC', 'North Carolina'),
                            ('ND', 'North Dakota'),
                            ('OH', 'Ohio'),
                            ('OK', 'Oklahoma'),
                            ('OR', 'Oregon'),
                            ('PA', 'Pennsylvania'),
                            ('RI', 'Rhode Island'),
                            ('SC', 'South Carolina'),
                            ('SD', 'South Dakota'),
                            ('TN', 'Tennessee'),
                            ('TX', 'Texas'),
                            ('UT', 'Utah'),
                            ('VT', 'Vermont'),
                            ('VA', 'Virginia'),
                            ('WA', 'Washington'),
                            ('WV', 'West Virginia'),
                            ('WI', 'Wisconsin'),
                            ('WY', 'Wyoming'),
                            ('XX', 'Other (Canada, Mexico, etc.)'),
                        ],
                        max_length=2,
                    ),
                ),
                ('make', models.CharField(max_length=63)),
                ('model', models.CharField(max_length=63)),
                (
                    'year',
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MaxValueValidator(2025),
                            django.core.validators.MinValueValidator(1903),
                        ]
                    ),
                ),
                ('color', models.CharField(max_length=63)),
            ],
        ),
        migrations.CreateModel(
            name='Discount',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'active',
                    models.BooleanField(
                        default=True, help_text='Discount is currently open & active'
                    ),
                ),
                ('name', models.CharField(max_length=255)),
                ('summary', models.CharField(max_length=255)),
                ('terms', models.TextField(max_length=4095)),
                ('url', models.URLField(blank=True, null=True)),
                (
                    'ga_key',
                    models.CharField(
                        help_text='key for Google spreadsheet with membership information (shared as read-only with the company)',
                        max_length=63,
                    ),
                ),
                ('time_created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                (
                    'student_required',
                    models.BooleanField(
                        default=False,
                        help_text='Discount provider requires recipients to be students',
                    ),
                ),
                (
                    'report_school',
                    models.BooleanField(
                        default=False,
                        help_text='Report MIT affiliation if participant is a student',
                    ),
                ),
                (
                    'report_student',
                    models.BooleanField(
                        default=False,
                        help_text='Report MIT affiliation and student status to discount provider',
                    ),
                ),
                (
                    'report_leader',
                    models.BooleanField(
                        default=False,
                        help_text='Report MITOC leader status to discount provider',
                    ),
                ),
                (
                    'report_access',
                    models.BooleanField(
                        default=False,
                        help_text='Report if participant should have leader, student, or admin level access',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='EmergencyContact',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('name', models.CharField(max_length=255)),
                (
                    'cell_phone',
                    phonenumber_field.modelfields.PhoneNumberField(
                        max_length=128, region=None
                    ),
                ),
                ('relationship', models.CharField(max_length=63)),
                ('email', models.EmailField(max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='EmergencyInfo',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('allergies', models.CharField(max_length=255)),
                ('medications', models.CharField(max_length=255)),
                (
                    'medical_history',
                    models.TextField(
                        help_text='Anything your trip leader would want to know about.',
                        max_length=2000,
                    ),
                ),
                (
                    'emergency_contact',
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='ws.emergencycontact',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='MentorActivity',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('name', models.CharField(max_length=31, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('user_id', models.IntegerField()),
                ('name', models.CharField(max_length=255)),
                (
                    'cell_phone',
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True, max_length=128, region=None
                    ),
                ),
                ('last_updated', models.DateTimeField(auto_now=True)),
                (
                    'email',
                    models.EmailField(
                        help_text="This will be shared with leaders & other participants. <a href='/accounts/email/'>Manage email addresses</a>.",
                        max_length=254,
                        unique=True,
                    ),
                ),
                (
                    'affiliation',
                    models.CharField(
                        choices=[
                            (
                                'Undergraduate student',
                                [('MU', 'MIT undergrad'), ('NU', 'Non-MIT undergrad')],
                            ),
                            (
                                'Graduate student',
                                [
                                    ('MG', 'MIT grad student'),
                                    ('NG', 'Non-MIT grad student'),
                                ],
                            ),
                            ('MA', 'MIT affiliate'),
                            ('NA', 'Non-affiliate'),
                        ],
                        max_length=2,
                    ),
                ),
                (
                    'car',
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to='ws.car',
                    ),
                ),
                ('discounts', models.ManyToManyField(blank=True, to='ws.Discount')),
                (
                    'emergency_info',
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='ws.emergencyinfo',
                    ),
                ),
                ('profile_last_updated', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['name', 'email'],
            },
        ),
        migrations.CreateModel(
            name='SignUp',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('time_created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True, max_length=1000)),
                ('order', models.IntegerField(blank=True, null=True)),
                ('manual_order', models.IntegerField(blank=True, null=True)),
                ('on_trip', models.BooleanField(default=False)),
                (
                    'participant',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='ws.participant'
                    ),
                ),
            ],
            options={
                'ordering': ['manual_order', 'last_updated'],
            },
        ),
        migrations.CreateModel(
            name='Trip',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'activity',
                    models.CharField(
                        choices=[
                            ('biking', 'Biking'),
                            ('boating', 'Boating'),
                            ('cabin', 'Cabin'),
                            ('climbing', 'Climbing'),
                            ('hiking', 'Hiking'),
                            ('winter_school', 'Winter School'),
                            ('circus', 'Circus'),
                            ('official_event', 'Official Event'),
                            ('course', 'Course'),
                        ],
                        default='winter_school',
                        max_length=31,
                    ),
                ),
                (
                    'allow_leader_signups',
                    models.BooleanField(
                        default=False,
                        help_text='Allow leaders to sign themselves up as trip leaders. (Leaders can always sign up as participants). Recommended for Circuses!',
                    ),
                ),
                ('name', models.CharField(max_length=127)),
                ('description', models.TextField()),
                (
                    'maximum_participants',
                    models.PositiveIntegerField(
                        default=8, verbose_name='Max participants'
                    ),
                ),
                ('difficulty_rating', models.CharField(max_length=63)),
                (
                    'level',
                    models.CharField(
                        blank=True,
                        help_text="This trip's A, B, or C designation (plus I/S rating if applicable).",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    'prereqs',
                    models.CharField(
                        blank=True, max_length=255, verbose_name='Prerequisites'
                    ),
                ),
                ('chair_approved', models.BooleanField(default=False)),
                (
                    'notes',
                    models.TextField(
                        blank=True,
                        help_text='Participants must add notes to their signups if you complete this field. This is a great place to ask important questions.',
                        max_length=2000,
                    ),
                ),
                ('time_created', models.DateTimeField(auto_now_add=True)),
                ('last_edited', models.DateTimeField(auto_now=True)),
                ('trip_date', models.DateField(default=ws.utils.dates.nearest_sat)),
                (
                    'signups_open_at',
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    'signups_close_at',
                    models.DateTimeField(
                        blank=True, default=ws.utils.dates.wed_morning, null=True
                    ),
                ),
                (
                    'let_participants_drop',
                    models.BooleanField(
                        default=False,
                        help_text='Allow participants to remove themselves from the trip any time before its start date.',
                    ),
                ),
                (
                    'honor_participant_pairing',
                    models.BooleanField(
                        default=True,
                        help_text='Try to place paired participants together on the trip.',
                    ),
                ),
                (
                    'algorithm',
                    models.CharField(
                        choices=[
                            ('lottery', 'lottery'),
                            ('fcfs', 'first-come, first-serve'),
                        ],
                        default='lottery',
                        max_length=31,
                    ),
                ),
                (
                    'lottery_task_id',
                    models.CharField(blank=True, max_length=36, null=True, unique=True),
                ),
                ('lottery_log', models.TextField(blank=True, null=True)),
                (
                    'creator',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='created_trips',
                        to='ws.participant',
                    ),
                ),
            ],
            options={
                'ordering': ['-trip_date', '-time_created'],
            },
        ),
        migrations.CreateModel(
            name='TripInfo',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('start_location', models.CharField(max_length=127)),
                ('start_time', models.CharField(max_length=63)),
                (
                    'turnaround_time',
                    models.CharField(
                        blank=True,
                        help_text="The time at which you'll turn back and head for your car/starting location",
                        max_length=63,
                    ),
                ),
                (
                    'return_time',
                    models.CharField(
                        help_text='When you expect to return to your car/starting location and be able to call the WIMP',
                        max_length=63,
                    ),
                ),
                (
                    'worry_time',
                    models.CharField(
                        help_text='Suggested: return time +3 hours. If the WIMP has not heard from you after this time and is unable to make contact with any leaders or participants, the authorities will be called.',
                        max_length=63,
                    ),
                ),
                (
                    'itinerary',
                    models.TextField(
                        help_text='A detailed account of your trip plan. Where will you be going? What route will you be taking? Include trails, peaks, intermediate destinations, back-up plans- anything that would help rescuers find you.'
                    ),
                ),
                (
                    'drivers',
                    models.ManyToManyField(
                        blank=True,
                        help_text="If a trip participant is driving, but is not on this list, they must first submit <a href='/profile/edit/#car'>information about their car</a>. They should then be added here.",
                        to='ws.Participant',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='WaitList',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'trip',
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to='ws.trip'
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='WaitListSignup',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('time_created', models.DateTimeField(auto_now_add=True)),
                ('manual_order', models.IntegerField(blank=True, null=True)),
                (
                    'signup',
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to='ws.signup'
                    ),
                ),
                (
                    'waitlist',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='ws.waitlist'
                    ),
                ),
            ],
            options={
                'ordering': ['-manual_order', 'time_created'],
            },
        ),
        migrations.CreateModel(
            name='WinterSchoolLeaderApplication',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('time_created', models.DateTimeField(auto_now_add=True)),
                (
                    'previous_rating',
                    models.CharField(
                        blank=True, help_text='Previous rating (if any)', max_length=255
                    ),
                ),
                (
                    'year',
                    models.PositiveIntegerField(
                        default=ws.utils.dates.ws_year,
                        help_text='Year this application pertains to.',
                        validators=[django.core.validators.MinValueValidator(2014)],
                    ),
                ),
                ('desired_rating', models.CharField(max_length=255)),
                (
                    'taking_wfa',
                    models.CharField(
                        choices=[
                            ('Yes', 'Yes'),
                            ('No', 'No'),
                            ('Maybe', "Maybe/don't know"),
                        ],
                        help_text='Save $100 on the course fee by leading two or more trips!',
                        max_length=10,
                        verbose_name='Do you plan on taking the subsidized WFA at MIT?',
                    ),
                ),
                (
                    'training',
                    models.TextField(
                        blank=True,
                        help_text='Details of any medical, technical, or leadership training and qualifications relevant to the winter environment. State the approximate dates of these activities. Leave blank if not applicable.',
                        max_length=5000,
                        verbose_name='Formal training and qualifications',
                    ),
                ),
                (
                    'winter_experience',
                    models.TextField(
                        blank=True,
                        help_text='Details of previous winter outdoors experience. Include the type of trip (x-country skiiing, above treeline, snowshoeing, ice climbing, etc), approximate dates and locations, numbers of participants, notable trail and weather conditions. Please also give details of whether you participated, led, or co-led these trips.',
                        max_length=5000,
                    ),
                ),
                (
                    'other_experience',
                    models.TextField(
                        blank=True,
                        help_text='Details about any relevant non-winter experience',
                        max_length=5000,
                        verbose_name='Other outdoors/leadership experience',
                    ),
                ),
                (
                    'notes_or_comments',
                    models.TextField(
                        blank=True,
                        help_text='Any relevant details, such as any limitations on availability on Tue/Thurs nights or weekends during IAP.',
                        max_length=5000,
                    ),
                ),
                (
                    'mentee_activities',
                    models.ManyToManyField(
                        blank=True,
                        help_text='Please select at least one.',
                        related_name='mentee_activities',
                        to='ws.MentorActivity',
                        verbose_name='For which activities would you like a mentor?',
                    ),
                ),
                (
                    'mentor_activities',
                    models.ManyToManyField(
                        blank=True,
                        help_text='Please select at least one.',
                        related_name='activities_mentored',
                        to='ws.MentorActivity',
                        verbose_name='Which activities would you like to mentor?',
                    ),
                ),
                (
                    'participant',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='ws.participant'
                    ),
                ),
            ],
            options={
                'ordering': ['time_created'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WinterSchoolSettings',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('time_created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                (
                    'allow_setting_attendance',
                    models.BooleanField(
                        default=False,
                        verbose_name='Let participants set lecture attendance',
                    ),
                ),
                (
                    'last_updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to='ws.participant',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='waitlist',
            name='unordered_signups',
            field=models.ManyToManyField(through='ws.WaitListSignup', to='ws.SignUp'),
        ),
        migrations.AddField(
            model_name='trip',
            name='info',
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to='ws.tripinfo',
            ),
        ),
        migrations.AddField(
            model_name='trip',
            name='leaders',
            field=models.ManyToManyField(
                blank=True, related_name='trips_led', to='ws.Participant'
            ),
        ),
        migrations.AddField(
            model_name='trip',
            name='signed_up_participants',
            field=models.ManyToManyField(through='ws.SignUp', to='ws.Participant'),
        ),
        migrations.AddField(
            model_name='signup',
            name='trip',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to='ws.trip'
            ),
        ),
        migrations.CreateModel(
            name='LotteryInfo',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'car_status',
                    models.CharField(
                        choices=[
                            ('none', 'Not driving'),
                            ('own', 'Can drive own car'),
                            ('rent', 'Willing to rent'),
                        ],
                        default='none',
                        max_length=7,
                    ),
                ),
                (
                    'number_of_passengers',
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(
                                13, message='Do you drive a bus?'
                            )
                        ],
                    ),
                ),
                ('last_updated', models.DateTimeField(auto_now=True)),
                (
                    'paired_with',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='paired_by',
                        to='ws.participant',
                    ),
                ),
                (
                    'participant',
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to='ws.participant'
                    ),
                ),
            ],
            options={
                'ordering': ['car_status', 'number_of_passengers'],
            },
        ),
        migrations.CreateModel(
            name='LectureAttendance',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'year',
                    models.PositiveIntegerField(
                        default=ws.utils.dates.ws_year,
                        help_text='Winter School year when lectures were attended.',
                        validators=[django.core.validators.MinValueValidator(2016)],
                    ),
                ),
                ('time_created', models.DateTimeField(auto_now_add=True)),
                (
                    'creator',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='lecture_attendances_marked',
                        to='ws.participant',
                    ),
                ),
                (
                    'participant',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='ws.participant'
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='LeaderSignUp',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('time_created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True, max_length=1000)),
                (
                    'participant',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='ws.participant'
                    ),
                ),
                (
                    'trip',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='ws.trip'
                    ),
                ),
            ],
            options={
                'ordering': ['time_created'],
            },
        ),
        migrations.CreateModel(
            name='LeaderRecommendation',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('time_created', models.DateTimeField(auto_now_add=True)),
                (
                    'activity',
                    models.CharField(
                        choices=[
                            ('biking', 'Biking'),
                            ('boating', 'Boating'),
                            ('cabin', 'Cabin'),
                            ('climbing', 'Climbing'),
                            ('hiking', 'Hiking'),
                            ('winter_school', 'Winter School'),
                            ('circus', 'Circus'),
                            ('official_event', 'Official Event'),
                            ('course', 'Course'),
                        ],
                        max_length=31,
                    ),
                ),
                ('rating', models.CharField(max_length=31)),
                ('notes', models.TextField(blank=True, max_length=500)),
                (
                    'creator',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='recommendations_created',
                        to='ws.participant',
                    ),
                ),
                (
                    'participant',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='ws.participant'
                    ),
                ),
            ],
            options={
                'ordering': ['participant'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LeaderRating',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('time_created', models.DateTimeField(auto_now_add=True)),
                (
                    'activity',
                    models.CharField(
                        choices=[
                            ('biking', 'Biking'),
                            ('boating', 'Boating'),
                            ('cabin', 'Cabin'),
                            ('climbing', 'Climbing'),
                            ('hiking', 'Hiking'),
                            ('winter_school', 'Winter School'),
                            ('circus', 'Circus'),
                            ('official_event', 'Official Event'),
                            ('course', 'Course'),
                        ],
                        max_length=31,
                    ),
                ),
                ('rating', models.CharField(max_length=31)),
                ('notes', models.TextField(blank=True, max_length=500)),
                ('active', models.BooleanField(default=True)),
                (
                    'creator',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='ratings_created',
                        to='ws.participant',
                    ),
                ),
                (
                    'participant',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='ws.participant'
                    ),
                ),
            ],
            options={
                'ordering': ['participant'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HikingLeaderApplication',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('time_created', models.DateTimeField(auto_now_add=True)),
                (
                    'previous_rating',
                    models.CharField(
                        blank=True, help_text='Previous rating (if any)', max_length=255
                    ),
                ),
                (
                    'year',
                    models.PositiveIntegerField(
                        default=ws.utils.dates.ws_year,
                        help_text='Year this application pertains to.',
                        validators=[django.core.validators.MinValueValidator(2014)],
                    ),
                ),
                (
                    'desired_rating',
                    models.CharField(
                        choices=[('Leader', 'Leader'), ('Co-Leader', 'Co-Leader')],
                        help_text='Co-Leader: Can co-lead a 3-season hiking trip with a Leader. Leader: Can run 3-season hiking trips.',
                        max_length=10,
                    ),
                ),
                (
                    'mitoc_experience',
                    models.TextField(
                        help_text='How long have you been a MITOC member? Please indicate what official MITOC hikes and Circuses you have been on. Include approximate dates and locations, number of participants, trail conditions, type of trip, etc. Give details of whether you participated, led, or co-led these trips. [Optional]: If you like, briefly summarize your experience on unofficial trips or experience outside of New England.',
                        max_length=5000,
                        verbose_name='Hiking Experience with MITOC',
                    ),
                ),
                (
                    'formal_training',
                    models.TextField(
                        blank=True,
                        help_text='Please give details of any medical training and qualifications, with dates. Also include any other formal outdoor education or qualifications.',
                        max_length=5000,
                    ),
                ),
                (
                    'leadership_experience',
                    models.TextField(
                        blank=True,
                        help_text="If you've been a leader elsewhere, please describe that here. This could include leadership in other collegiate outing clubs, student sports clubs, NOLS, Outward Bound, or AMC; working as a guide, summer camp counselor, or Scout leader; or organizing hikes with friends.",
                        max_length=5000,
                        verbose_name='Group outdoor/leadership experience',
                    ),
                ),
                (
                    'participant',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='ws.participant'
                    ),
                ),
            ],
            options={
                'ordering': ['time_created'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('showed_up', models.BooleanField(default=True)),
                ('comments', models.TextField(max_length=2000)),
                ('time_created', models.DateTimeField(auto_now_add=True)),
                (
                    'leader',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='authored_feedback',
                        to='ws.participant',
                    ),
                ),
                (
                    'participant',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='ws.participant'
                    ),
                ),
                (
                    'trip',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to='ws.trip',
                    ),
                ),
            ],
            options={
                'ordering': ['participant', '-time_created'],
            },
        ),
        migrations.AddField(
            model_name='discount',
            name='administrators',
            field=models.ManyToManyField(
                blank=True,
                help_text='Persons selected to administer this discount',
                related_name='discounts_administered',
                to='ws.Participant',
            ),
        ),
        migrations.CreateModel(
            name='ClimbingLeaderApplication',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('time_created', models.DateTimeField(auto_now_add=True)),
                (
                    'previous_rating',
                    models.CharField(
                        blank=True, help_text='Previous rating (if any)', max_length=255
                    ),
                ),
                (
                    'year',
                    models.PositiveIntegerField(
                        default=ws.utils.dates.ws_year,
                        help_text='Year this application pertains to.',
                        validators=[django.core.validators.MinValueValidator(2014)],
                    ),
                ),
                (
                    'desired_rating',
                    models.CharField(
                        choices=[
                            ('Bouldering', 'Bouldering'),
                            ('Single-pitch', 'Single-pitch'),
                            ('Multi-pitch', 'Multi-pitch'),
                            ('Bouldering + Single-pitch', 'Bouldering + Single-pitch'),
                            ('Bouldering + Multi-pitch', 'Bouldering + Multi-pitch'),
                        ],
                        max_length=32,
                    ),
                ),
                ('years_climbing', models.IntegerField()),
                ('years_climbing_outside', models.IntegerField()),
                (
                    'outdoor_bouldering_grade',
                    models.CharField(
                        help_text='At what grade are you comfortable bouldering outside?',
                        max_length=255,
                    ),
                ),
                (
                    'outdoor_sport_leading_grade',
                    models.CharField(
                        help_text='At what grade are you comfortable leading outside on sport routes?',
                        max_length=255,
                    ),
                ),
                (
                    'outdoor_trad_leading_grade',
                    models.CharField(
                        help_text='At what grade are you comfortable leading outside on trad routes?',
                        max_length=255,
                    ),
                ),
                (
                    'familiarity_spotting',
                    models.CharField(
                        choices=[
                            ('none', 'not at all'),
                            ('some', 'some exposure'),
                            ('comfortable', 'comfortable'),
                            ('very comfortable', 'very comfortable'),
                        ],
                        max_length=16,
                        verbose_name='Familarity with spotting boulder problems',
                    ),
                ),
                (
                    'familiarity_bolt_anchors',
                    models.CharField(
                        choices=[
                            ('none', 'not at all'),
                            ('some', 'some exposure'),
                            ('comfortable', 'comfortable'),
                            ('very comfortable', 'very comfortable'),
                        ],
                        max_length=16,
                        verbose_name="Familiarity with 2-bolt 'sport' anchors",
                    ),
                ),
                (
                    'familiarity_gear_anchors',
                    models.CharField(
                        choices=[
                            ('none', 'not at all'),
                            ('some', 'some exposure'),
                            ('comfortable', 'comfortable'),
                            ('very comfortable', 'very comfortable'),
                        ],
                        max_length=16,
                        verbose_name="Familiarity with trad 'gear' anchors",
                    ),
                ),
                (
                    'familiarity_sr',
                    models.CharField(
                        choices=[
                            ('none', 'not at all'),
                            ('some', 'some exposure'),
                            ('comfortable', 'comfortable'),
                            ('very comfortable', 'very comfortable'),
                        ],
                        max_length=16,
                        verbose_name='Familiarity with multi-pitch self-rescue',
                    ),
                ),
                (
                    'spotting_description',
                    models.TextField(
                        blank=True,
                        help_text='Describe how you would spot a climber on a meandering tall bouldering problem.',
                    ),
                ),
                (
                    'tr_anchor_description',
                    models.TextField(
                        blank=True,
                        help_text='Describe how you would build a top-rope anchor at a sport crag.',
                        verbose_name='Top rope anchor description',
                    ),
                ),
                (
                    'rappel_description',
                    models.TextField(
                        blank=True,
                        help_text='Describe how you would set up a safe rappel.',
                    ),
                ),
                (
                    'gear_anchor_description',
                    models.TextField(
                        blank=True,
                        help_text='Describe what you look for when building a typical gear anchor.',
                    ),
                ),
                ('formal_training', models.TextField(blank=True)),
                ('teaching_experience', models.TextField(blank=True)),
                (
                    'notable_climbs',
                    models.TextField(
                        blank=True,
                        help_text='What are some particularly memorable climbs you have done?',
                    ),
                ),
                (
                    'favorite_route',
                    models.TextField(
                        blank=True,
                        help_text='Do you have a favorite route? If so, what is it and why?',
                    ),
                ),
                (
                    'extra_info',
                    models.TextField(
                        blank=True,
                        help_text='Is there anything else you would like us to know?',
                    ),
                ),
                (
                    'participant',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='ws.participant'
                    ),
                ),
            ],
            options={
                'ordering': ['time_created'],
                'abstract': False,
            },
        ),
        migrations.AlterField(
            model_name='participant',
            name='profile_last_updated',
            field=models.DateTimeField(auto_now_add=True),
        ),
        migrations.AddField(
            model_name='trip',
            name='wimp',
            field=models.ForeignKey(
                blank=True,
                help_text='Ensures the trip returns safely. Can view trip itinerary, participant medical info.',
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='wimp_trips',
                to='ws.participant',
                verbose_name='WIMP',
            ),
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'membership_expires',
                    models.DateField(
                        blank=True,
                        help_text='Last day that annual membership dues are valid',
                        null=True,
                    ),
                ),
                (
                    'waiver_expires',
                    models.DateField(
                        blank=True,
                        help_text='Day after which liability waiver is no longer valid',
                        null=True,
                    ),
                ),
                ('last_cached', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.AddField(
            model_name='participant',
            name='membership',
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to='ws.membership',
            ),
        ),
        migrations.AddField(
            model_name='trip',
            name='membership_required',
            field=models.BooleanField(
                default=True,
                help_text='Require an active MITOC membership to participate. If disabled, only waivers will be mandated.',
            ),
        ),
        migrations.AddField(
            model_name='participant',
            name='gravatar_opt_out',
            field=models.BooleanField(
                default=False,
                help_text="Don't use Gravatar to show an avatar for this account",
                verbose_name='Opt out of Gravatar',
            ),
        ),
        migrations.RunPython(
            code=make_groups,
            reverse_code=do_nothing,
        ),
        migrations.CreateModel(
            name='DistinctAccounts',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'left',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='distinctions_left',
                        to='ws.participant',
                    ),
                ),
                (
                    'right',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='distinctions_right',
                        to='ws.participant',
                    ),
                ),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='leadersignup',
            unique_together={('participant', 'trip')},
        ),
        migrations.AlterUniqueTogether(
            name='signup',
            unique_together={('participant', 'trip')},
        ),
        migrations.AlterField(
            model_name='participant',
            name='affiliation',
            field=models.CharField(
                choices=[
                    (
                        'Undergraduate student',
                        [('MU', 'MIT undergrad'), ('NU', 'Non-MIT undergrad')],
                    ),
                    (
                        'Graduate student',
                        [('MG', 'MIT grad student'), ('NG', 'Non-MIT grad student')],
                    ),
                    (
                        'MIT',
                        [
                            ('MA', 'MIT affiliate (staff, faculty, etc.)'),
                            ('ML', 'MIT alum (former student)'),
                        ],
                    ),
                    ('NA', 'Non-affiliate'),
                ],
                max_length=2,
            ),
        ),
        migrations.AlterField(
            model_name='participant',
            name='affiliation',
            field=models.CharField(
                choices=[
                    (
                        'Undergraduate student',
                        [('MU', 'MIT undergrad'), ('MU', 'Non-MIT undergrad')],
                    ),
                    (
                        'Graduate student',
                        [('MG', 'MIT grad student'), ('NG', 'Non-MIT grad student')],
                    ),
                    (
                        'MIT',
                        [
                            ('MA', 'MIT affiliate (staff or faculty)'),
                            ('ML', 'MIT alum (former student)'),
                        ],
                    ),
                    ('NA', 'Non-affiliate'),
                ],
                max_length=2,
            ),
        ),
        migrations.AlterField(
            model_name='participant',
            name='affiliation',
            field=models.CharField(
                choices=[
                    (
                        'Undergraduate student',
                        [('MU', 'MIT undergrad'), ('NU', 'Non-MIT undergrad')],
                    ),
                    (
                        'Graduate student',
                        [('MG', 'MIT grad student'), ('NG', 'Non-MIT grad student')],
                    ),
                    (
                        'MIT',
                        [
                            ('MA', 'MIT affiliate (staff or faculty)'),
                            ('ML', 'MIT alum (former student)'),
                        ],
                    ),
                    ('NA', 'Non-affiliate'),
                ],
                max_length=2,
            ),
        ),
        migrations.AlterField(
            model_name='trip',
            name='description',
            field=models.TextField(
                help_text='<a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet">Markdown</a> supported! Please use HTTPS images sparingly, and only if properly licensed.'
            ),
        ),
        migrations.CreateModel(
            name='LotteryAdjustment',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('adjustment', models.IntegerField()),
                ('time_created', models.DateTimeField(auto_now_add=True)),
                (
                    'expires',
                    models.DateTimeField(
                        help_text='Time at which this override should no longer apply'
                    ),
                ),
                (
                    'creator',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='adjustments_made',
                        to='ws.participant',
                    ),
                ),
                (
                    'participant',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='adjustments_received',
                        to='ws.participant',
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name='climbingleaderapplication',
            name='archived',
            field=models.BooleanField(
                default=False,
                help_text='Application should not be considered pending. Allows participant to submit another application if they desire.',
            ),
        ),
        migrations.AddField(
            model_name='hikingleaderapplication',
            name='archived',
            field=models.BooleanField(
                default=False,
                help_text='Application should not be considered pending. Allows participant to submit another application if they desire.',
            ),
        ),
        migrations.AddField(
            model_name='winterschoolleaderapplication',
            name='archived',
            field=models.BooleanField(
                default=False,
                help_text='Application should not be considered pending. Allows participant to submit another application if they desire.',
            ),
        ),
        migrations.AddField(
            model_name='participant',
            name='insecure_password',
            field=models.BooleanField(
                default=False, verbose_name='Password shown to be insecure'
            ),
        ),
        migrations.AddField(
            model_name='participant',
            name='password_last_checked',
            field=models.DateTimeField(
                blank=True,
                null=True,
                verbose_name="Last time password was checked against HaveIBeenPwned's database",
            ),
        ),
        migrations.AlterField(
            model_name='winterschoolleaderapplication',
            name='taking_wfa',
            field=models.CharField(
                choices=[('Yes', 'Yes'), ('No', 'No'), ('Maybe', "Maybe/don't know")],
                help_text="You can subsidize your WFA certification by $100 by leading two or more trips! We will be holding a WFA course on MIT's campus (dates to be announced soon).",
                max_length=10,
                verbose_name='Do you plan on taking a WFA course before Winter School?',
            ),
        ),
        migrations.AddField(
            model_name='winterschoolleaderapplication',
            name='technical_skills',
            field=models.TextField(
                blank=True,
                help_text='Please summarize how you meet the criteria for the leader rating you are requesting, including any relevant technical skills (traction use, navigation, use of overnight equipment, etc.)',
                max_length=5000,
            ),
        ),
        migrations.AddField(
            model_name='winterschoolleaderapplication',
            name='ice_experience',
            field=models.TextField(
                blank=True,
                help_text='Please describe your ice-climbing experience, including the approximate number of days you have ice-climbed in the last two years.',
                max_length=5000,
                verbose_name='Ice-climbing experience (ice leader applicants only)',
            ),
        ),
        migrations.AddField(
            model_name='winterschoolleaderapplication',
            name='ski_experience',
            field=models.TextField(
                blank=True,
                help_text='Please describe your skiing experience, including both resort and back-country experience, and an estimate of the number of days you have backcountry skied in the last two years.',
                max_length=5000,
                verbose_name='Ski experience (ski leader applicants only)',
            ),
        ),
        migrations.AddField(
            model_name='winterschoolleaderapplication',
            name='mentorship_goals',
            field=models.TextField(
                blank=True,
                help_text='What are you looking to get out of the mentorship program?',
                max_length=5000,
            ),
        ),
        migrations.AlterField(
            model_name='climbingleaderapplication',
            name='familiarity_spotting',
            field=models.CharField(
                choices=[
                    ('none', 'not at all'),
                    ('some', 'some exposure'),
                    ('comfortable', 'comfortable'),
                    ('very comfortable', 'very comfortable'),
                ],
                max_length=16,
                verbose_name='Familiarity with spotting boulder problems',
            ),
        ),
        migrations.AlterField(
            model_name='winterschoolleaderapplication',
            name='winter_experience',
            field=models.TextField(
                blank=True,
                help_text='Details of previous winter outdoors experience. Include the type of trip (x-country skiing, above treeline, snowshoeing, ice climbing, etc), approximate dates and locations, numbers of participants, notable trail and weather conditions. Please also give details of whether you participated, led, or co-led these trips.',
                max_length=5000,
            ),
        ),
        migrations.AddField(
            model_name='trip',
            name='program',
            field=models.CharField(
                choices=[
                    (
                        'Specific rating required',
                        [
                            ('biking', 'Biking'),
                            ('boating', 'Boating'),
                            ('cabin', 'Cabin'),
                            ('climbing', 'Climbing'),
                            ('hiking', '3-season hiking'),
                            ('mitoc_rock_program', 'MITOC Rock Program'),
                            ('winter_school', 'Winter School'),
                            ('winter_non_iap', 'Winter (outside IAP)'),
                        ],
                    ),
                    (
                        'Any leader rating allowed',
                        [
                            ('circus', 'Circus'),
                            ('service', 'Service'),
                            ('none', 'None'),
                        ],
                    ),
                ],
                default='none',
                max_length=255,
            ),
        ),
        migrations.AddField(
            model_name='trip',
            name='trip_type',
            field=models.CharField(
                choices=[
                    (
                        'Biking',
                        [
                            ('biking_road', 'Road biking'),
                            ('biking_mountain', 'Mountain biking'),
                        ],
                    ),
                    (
                        'Boating',
                        [
                            ('boating_canoeing', 'Canoeing'),
                            ('boating_kayaking', 'Kayaking'),
                            ('boating_kayaking_sea', 'Sea kayaking'),
                            ('boating_surfing', 'Surfing'),
                        ],
                    ),
                    (
                        'Climbing',
                        [
                            ('climbing_bouldering', 'Bouldering'),
                            ('climbing_gym', 'Gym climbing'),
                            ('climbing_ice', 'Ice climbing'),
                            ('climbing_sport', 'Sport climbing, top rope'),
                            ('climbing_trad', 'Trad climbing'),
                        ],
                    ),
                    (
                        'Hiking',
                        [
                            ('hiking_hiking', 'Hiking'),
                            ('hiking_trail_running', 'Trail running'),
                        ],
                    ),
                    (
                        'Skiing',
                        [
                            ('skiing_bc', 'Backcountry skiing'),
                            ('skiing_xc', 'Cross-country skiing'),
                            ('skiing_resort', 'Resort skiing'),
                        ],
                    ),
                    (
                        'Miscellaneous',
                        [('ice_skating', 'Ice skating'), ('ultimate', 'Ultimate')],
                    ),
                    (
                        'Other, N/A',
                        [('none', 'None, or not applicable'), ('other', 'Other')],
                    ),
                ],
                default='none',
                max_length=255,
            ),
        ),
        migrations.AlterField(
            model_name='trip',
            name='trip_type',
            field=models.CharField(
                choices=[
                    (
                        'Biking',
                        [
                            ('biking_road', 'Road biking'),
                            ('biking_mountain', 'Mountain biking'),
                        ],
                    ),
                    (
                        'Boating',
                        [
                            ('boating_canoeing', 'Canoeing'),
                            ('boating_kayaking', 'Kayaking'),
                            ('boating_kayaking_sea', 'Sea kayaking'),
                            ('boating_surfing', 'Surfing'),
                        ],
                    ),
                    (
                        'Climbing',
                        [
                            ('climbing_bouldering', 'Bouldering'),
                            ('climbing_gym', 'Gym climbing'),
                            ('climbing_ice', 'Ice climbing'),
                            ('climbing_sport', 'Sport climbing, top rope'),
                            ('climbing_trad', 'Trad climbing'),
                        ],
                    ),
                    (
                        'Hiking',
                        [
                            ('hiking_hiking', 'Hiking'),
                            ('hiking_trail_running', 'Trail running'),
                        ],
                    ),
                    (
                        'Skiing',
                        [
                            ('skiing_bc', 'Backcountry skiing'),
                            ('skiing_xc', 'Cross-country skiing'),
                            ('skiing_resort', 'Resort skiing'),
                        ],
                    ),
                    (
                        'Miscellaneous',
                        [('ice_skating', 'Ice skating'), ('ultimate', 'Ultimate')],
                    ),
                    (
                        'Other, N/A',
                        [('none', 'None, or not applicable'), ('other', 'Other')],
                    ),
                ],
                max_length=255,
            ),
        ),
        migrations.AlterModelOptions(
            name='waitlistsignup',
            options={'ordering': ['-manual_order', 'time_created', 'pk']},
        ),
        migrations.AlterField(
            model_name='trip',
            name='signups_close_at',
            field=models.DateTimeField(
                blank=True, default=ws.utils.dates.default_signups_close_at, null=True
            ),
        ),
        migrations.AddField(
            model_name='winterschoolsettings',
            name='accept_applications',
            field=models.BooleanField(
                default=True,
                verbose_name='Accept new Winter School leader applications',
            ),
        ),
        migrations.AlterField(
            model_name='trip',
            name='program',
            field=models.CharField(
                choices=[
                    (
                        'Specific rating required',
                        [
                            ('biking', 'Biking'),
                            ('boating', 'Boating'),
                            ('climbing', 'Climbing'),
                            ('hiking', '3-season hiking'),
                            ('mitoc_rock_program', 'MITOC Rock Program'),
                            ('winter_school', 'Winter School'),
                            ('winter_non_iap', 'Winter (outside IAP)'),
                        ],
                    ),
                    (
                        'Any leader rating allowed',
                        [
                            ('circus', 'Circus'),
                            ('service', 'Service'),
                            ('none', 'None'),
                        ],
                    ),
                ],
                max_length=255,
            ),
        ),
        migrations.AlterField(
            model_name='trip',
            name='program',
            field=models.CharField(
                choices=[
                    (
                        'Specific rating required',
                        [
                            ('biking', 'Biking'),
                            ('boating', 'Boating'),
                            ('cabin', 'Cabin'),
                            ('climbing', 'Climbing'),
                            ('hiking', '3-season hiking'),
                            ('mitoc_rock_program', 'MITOC Rock Program'),
                            ('winter_school', 'Winter School'),
                            ('winter_non_iap', 'Winter (outside IAP)'),
                        ],
                    ),
                    (
                        'Any leader rating allowed',
                        [
                            ('circus', 'Circus'),
                            ('service', 'Service'),
                            ('none', 'None'),
                        ],
                    ),
                ],
                default='none',
                max_length=255,
            ),
        ),
        migrations.AddField(
            model_name='tripinfo',
            name='last_updated',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AlterField(
            model_name='tripinfo',
            name='worry_time',
            field=models.CharField(
                help_text='Suggested: 7 pm, or return time +2 hours (whichever is later). If the WIMP has not heard from you after this time and is unable to make contact with any leaders or participants, the authorities will be called.',
                max_length=63,
            ),
        ),
        migrations.AlterField(
            model_name='participant',
            name='email',
            field=models.EmailField(
                help_text='This will be shared with leaders & other participants. <a href="/accounts/email/">Manage email addresses</a>.',
                max_length=254,
                unique=True,
            ),
        ),
        migrations.AlterField(
            model_name='tripinfo',
            name='drivers',
            field=models.ManyToManyField(
                blank=True,
                help_text='If a trip participant is driving, but is not on this list, they must first submit <a href="/profile/edit/#car">information about their car</a>. They should then be added here.',
                to='ws.Participant',
            ),
        ),
        migrations.CreateModel(
            name='LotterySeparation',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('time_created', models.DateTimeField(auto_now_add=True)),
                (
                    'creator',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='separations_created',
                        to='ws.participant',
                    ),
                ),
                (
                    'initiator',
                    models.ForeignKey(
                        help_text='Participant requesting a separation',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='separations_initiated',
                        to='ws.participant',
                    ),
                ),
                (
                    'recipient',
                    models.ForeignKey(
                        help_text='The participant with whom the initiator should not be placed on a trip',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='separations_received',
                        to='ws.participant',
                    ),
                ),
            ],
            options={
                'unique_together': {('initiator', 'recipient')},
            },
        ),
        migrations.AlterField(
            model_name='discount',
            name='ga_key',
            field=models.CharField(
                blank=True,
                help_text='key for Google spreadsheet with membership information (shared as read-only with the company)',
                max_length=63,
            ),
        ),
        migrations.RunPython(
            code=drop_perms,
            reverse_code=do_nothing,
        ),
        migrations.AddField(
            model_name='participant',
            name='temp_user',
            field=models.ForeignKey(
                default=None,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.RemoveField(
            model_name='participant',
            name='user_id',
        ),
        migrations.RenameField(
            model_name='participant',
            old_name='temp_user',
            new_name='user',
        ),
        migrations.AlterField(
            model_name='participant',
            name='user',
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.CreateModel(
            name='PasswordQuality',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'is_insecure',
                    models.BooleanField(
                        default=False, verbose_name='Password shown to be insecure'
                    ),
                ),
                (
                    'last_checked',
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Last time password was checked against HaveIBeenPwned's database",
                    ),
                ),
                (
                    'participant',
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to='ws.participant'
                    ),
                ),
            ],
        ),
        migrations.RemoveField(
            model_name='participant',
            name='insecure_password',
        ),
        migrations.RemoveField(
            model_name='participant',
            name='password_last_checked',
        ),
        migrations.AlterField(
            model_name='trip',
            name='allow_leader_signups',
            field=models.BooleanField(
                default=False,
                help_text='Leaders can add themselves directly to the list of trip leaders, even if trip is full or in lottery mode. Recommended for Circuses!',
            ),
        ),
        migrations.AlterField(
            model_name='trip',
            name='honor_participant_pairing',
            field=models.BooleanField(
                default=True,
                help_text='Try to place paired participants together on the trip (if both sign up).',
            ),
        ),
        migrations.AlterField(
            model_name='trip',
            name='membership_required',
            field=models.BooleanField(
                default=True,
                help_text='Require an active MITOC membership to participate (waivers are always required).',
            ),
        ),
        migrations.AddField(
            model_name='participant',
            name='send_membership_reminder',
            field=models.BooleanField(
                default=False,
                help_text="MITOC cannot automatically renew memberships, but we can send you an email when it's time to renew.",
                verbose_name='Send annual reminder to renew membership',
            ),
        ),
        migrations.CreateModel(
            name='MembershipReminder',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'reminder_sent_at',
                    models.DateTimeField(
                        verbose_name='Last time an email was sent reminding this participant to renew'
                    ),
                ),
                (
                    'participant',
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to='ws.participant'
                    ),
                ),
            ],
        ),
        migrations.AlterField(
            model_name='lotteryinfo',
            name='car_status',
            field=models.CharField(
                choices=[
                    ('none', 'Not driving'),
                    ('own', 'Can drive others'),
                    ('rent', 'Willing to rent'),
                    ('self', 'Can drive self'),
                ],
                default='none',
                max_length=7,
            ),
        ),
        migrations.AlterField(
            model_name='trip',
            name='program',
            field=models.CharField(
                choices=[
                    (
                        'Specific rating required',
                        [
                            ('biking', 'Biking'),
                            ('boating', 'Boating'),
                            ('cabin', 'Cabin'),
                            ('climbing', 'Climbing'),
                            ('hiking', '3-season hiking'),
                            ('mitoc_rock_program', 'School of Rock'),
                            ('winter_school', 'Winter School'),
                            ('winter_non_iap', 'Winter (outside IAP)'),
                        ],
                    ),
                    (
                        'Any leader rating allowed',
                        [
                            ('circus', 'Circus'),
                            ('service', 'Service'),
                            ('none', 'None'),
                        ],
                    ),
                ],
                default='none',
                max_length=255,
            ),
        ),
        migrations.AlterField(
            model_name='trip',
            name='signups_open_at',
            field=models.DateTimeField(default=ws.utils.dates.local_now_to_the_minute),
        ),
        migrations.AddField(
            model_name='trip',
            name='edit_revision',
            field=models.PositiveIntegerField(
                default=0,
                help_text='An incremented integer, to avoid simultaneous edits to the trip.',
            ),
        ),
        migrations.AddField(
            model_name='trip',
            name='last_updated_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='trips_updated',
                to='ws.participant',
            ),
        ),
        migrations.AddIndex(
            model_name='trip',
            index=django.contrib.postgres.indexes.GistIndex(
                django.contrib.postgres.search.CombinedSearchVector(
                    django.contrib.postgres.search.CombinedSearchVector(
                        django.contrib.postgres.search.SearchVector(
                            'name', config='english', weight='A'
                        ),
                        '||',
                        django.contrib.postgres.search.SearchVector(
                            'description', config='english', weight='B'
                        ),
                        django.contrib.postgres.search.SearchConfig('english'),
                    ),
                    '||',
                    django.contrib.postgres.search.SearchVector(
                        'prereqs', config='english', weight='B'
                    ),
                    django.contrib.postgres.search.SearchConfig('english'),
                ),
                name='search_vector_idx',
            ),
        ),
        migrations.AddField(
            model_name='trip',
            name='summary',
            field=models.CharField(
                help_text='Brief summary of the trip, to be displayed on lists of all trips',
                max_length=80,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name='trip',
            name='summary',
            field=models.CharField(
                help_text='Brief summary of the trip, to be displayed on lists of all trips',
                max_length=80,
            ),
        ),
        migrations.AlterField(
            model_name='winterschoolleaderapplication',
            name='taking_wfa',
            field=models.CharField(
                choices=[
                    ('Yes', 'Yes'),
                    ('Already', 'Already hold WFA or equivalent'),
                    ('No', 'No'),
                    ('Maybe', "Maybe/don't know"),
                ],
                help_text="You can subsidize your WFA certification by $100 by leading two or more trips! MITOC holds a WFA course every fall on MIT's campus.",
                max_length=10,
                verbose_name='Do you plan on taking a WFA course before Winter School?',
            ),
        ),
        migrations.AlterField(
            model_name='winterschoolleaderapplication',
            name='training',
            field=models.TextField(
                blank=True,
                help_text='Details of any medical, technical, or leadership training and qualifications relevant to the winter environment, including WFA/WFR if previously taken. State the approximate dates of these activities. Leave blank if not applicable.',
                max_length=5000,
                verbose_name='Formal training and qualifications',
            ),
        ),
        migrations.AlterField(
            model_name='trip',
            name='trip_type',
            field=models.CharField(
                choices=[
                    (
                        'Biking',
                        [
                            ('biking_road', 'Road biking'),
                            ('biking_mountain', 'Mountain biking'),
                        ],
                    ),
                    (
                        'Boating',
                        [
                            ('boating_canoeing', 'Canoeing'),
                            ('boating_kayaking', 'Kayaking'),
                            ('boating_kayaking_sea', 'Sea kayaking'),
                            ('boating_surfing', 'Surfing'),
                        ],
                    ),
                    (
                        'Climbing',
                        [
                            ('climbing_bouldering', 'Bouldering'),
                            ('climbing_gym', 'Gym climbing'),
                            ('climbing_ice', 'Ice climbing'),
                            ('climbing_sport', 'Sport climbing, top rope'),
                            ('climbing_trad', 'Trad climbing'),
                        ],
                    ),
                    (
                        'Hiking',
                        [
                            ('hiking_hiking', 'Hiking'),
                            ('hiking_trail_running', 'Trail running'),
                        ],
                    ),
                    (
                        'Skiing',
                        [
                            ('skiing_bc', 'Backcountry skiing'),
                            ('skiing_xc', 'Cross-country skiing'),
                            ('skiing_resort', 'Resort skiing'),
                        ],
                    ),
                    (
                        'Miscellaneous',
                        [
                            ('ice_skating', 'Ice skating'),
                            ('ultimate', 'Ultimate'),
                            ('yoga', 'Yoga'),
                        ],
                    ),
                    (
                        'Other, N/A',
                        [('none', 'None, or not applicable'), ('other', 'Other')],
                    ),
                ],
                max_length=255,
            ),
        ),
        migrations.AddField(
            model_name='trip',
            name='requires_reimbursement',
            field=models.BooleanField(
                default=False,
                help_text='If you have an approved budget for this trip, you must register with Atlas.',
            ),
        ),
        migrations.AlterField(
            model_name='trip',
            name='trip_type',
            field=models.CharField(
                choices=[
                    (
                        'Biking',
                        [
                            ('biking_road', 'Road biking'),
                            ('biking_mountain', 'Mountain biking'),
                        ],
                    ),
                    (
                        'Boating',
                        [
                            ('boating_canoeing', 'Canoeing'),
                            ('boating_kayaking', 'Kayaking'),
                            ('boating_kayaking_sea', 'Sea kayaking'),
                            ('boating_surfing', 'Surfing'),
                        ],
                    ),
                    (
                        'Climbing',
                        [
                            ('climbing_bouldering', 'Bouldering'),
                            ('climbing_gym', 'Gym climbing'),
                            ('climbing_ice', 'Ice climbing'),
                            ('climbing_sport', 'Sport climbing, top rope'),
                            ('climbing_trad', 'Trad climbing'),
                        ],
                    ),
                    (
                        'Hiking',
                        [
                            ('hiking_hiking', 'Hiking'),
                            ('hiking_trail_running', 'Trail running'),
                        ],
                    ),
                    (
                        'Skiing',
                        [
                            ('skiing_bc', 'Backcountry skiing'),
                            ('skiing_xc', 'Cross-country skiing'),
                            ('skiing_resort', 'Resort skiing'),
                        ],
                    ),
                    (
                        'Miscellaneous',
                        [
                            ('ice_skating', 'Ice skating'),
                            ('ultimate', 'Ultimate'),
                            ('yoga', 'Yoga'),
                        ],
                    ),
                    (
                        'Other, N/A',
                        [('none', 'None, or not applicable'), ('other', 'Other')],
                    ),
                ],
                max_length=255,
                verbose_name='Primary trip activity',
            ),
        ),
        migrations.AddField(
            model_name='trip',
            name='winter_terrain_level',
            field=models.CharField(
                blank=True,
                choices=[
                    ('A', 'A: <1 hour to intensive care, below treeline'),
                    ('B', 'B: >1 hour to intensive care, below treeline'),
                    ('C', 'C: above treeline'),
                ],
                help_text='Trip leaders must meet <a href="/help/participants/ws_ratings/">requirements for terrain & activity ratings</a>.',
                max_length=1,
                null=True,
                verbose_name='Terrain level',
            ),
        ),
        migrations.AlterField(
            model_name='trip',
            name='program',
            field=models.CharField(
                choices=[
                    (
                        'Specific rating required',
                        [
                            ('biking', 'Biking'),
                            ('boating', 'Boating'),
                            ('cabin', 'Cabin'),
                            ('climbing', 'Climbing'),
                            ('hiking', '3-season hiking'),
                            ('mitoc_rock_program', 'School of Rock'),
                            ('winter_school', 'Winter School'),
                            ('winter_non_iap', 'Winter (outside IAP)'),
                        ],
                    ),
                    (
                        'Any leader rating allowed',
                        [
                            ('circus', 'Circus'),
                            ('service', 'Service'),
                            ('none', 'None'),
                        ],
                    ),
                ],
                db_index=True,
                default='none',
                max_length=255,
            ),
        ),
        migrations.AlterField(
            model_name='trip',
            name='trip_type',
            field=models.CharField(
                choices=[
                    (
                        'Biking',
                        [
                            ('biking_road', 'Road biking'),
                            ('biking_mountain', 'Mountain biking'),
                        ],
                    ),
                    (
                        'Boating',
                        [
                            ('boating_canoeing', 'Canoeing'),
                            ('boating_kayaking', 'Kayaking'),
                            ('boating_kayaking_sea', 'Sea kayaking'),
                            ('boating_surfing', 'Surfing'),
                        ],
                    ),
                    (
                        'Climbing',
                        [
                            ('climbing_bouldering', 'Bouldering'),
                            ('climbing_gym', 'Gym climbing'),
                            ('climbing_ice', 'Ice climbing'),
                            ('climbing_sport', 'Sport climbing, top rope'),
                            ('climbing_trad', 'Trad climbing'),
                        ],
                    ),
                    (
                        'Hiking',
                        [
                            ('hiking_hiking', 'Hiking'),
                            ('hiking_trail_running', 'Trail running'),
                        ],
                    ),
                    (
                        'Skiing',
                        [
                            ('skiing_bc', 'Backcountry skiing'),
                            ('skiing_xc', 'Cross-country skiing'),
                            ('skiing_resort', 'Resort skiing'),
                        ],
                    ),
                    (
                        'Miscellaneous',
                        [
                            ('ice_skating', 'Ice skating'),
                            ('ultimate', 'Ultimate'),
                            ('yoga', 'Yoga'),
                        ],
                    ),
                    (
                        'Other, N/A',
                        [('none', 'None, or not applicable'), ('other', 'Other')],
                    ),
                ],
                db_index=True,
                max_length=255,
                verbose_name='Primary trip activity',
            ),
        ),
        migrations.AlterField(
            model_name='trip',
            name='winter_terrain_level',
            field=models.CharField(
                blank=True,
                choices=[
                    ('A', 'A: <1 hour to intensive care, below treeline'),
                    ('B', 'B: >1 hour to intensive care, below treeline'),
                    ('C', 'C: above treeline'),
                ],
                db_index=True,
                help_text='Trip leaders must meet <a href="/help/participants/ws_ratings/">requirements for terrain & activity ratings</a>.',
                max_length=1,
                null=True,
                verbose_name='Terrain level',
            ),
        ),
        migrations.AlterField(
            model_name='trip',
            name='trip_date',
            field=models.DateField(db_index=True, default=ws.utils.dates.nearest_sat),
        ),
        migrations.RemoveIndex(
            model_name='trip',
            name='search_vector_idx',
        ),
        migrations.AddIndex(
            model_name='trip',
            index=django.contrib.postgres.indexes.GistIndex(
                django.contrib.postgres.search.CombinedSearchVector(
                    django.contrib.postgres.search.CombinedSearchVector(
                        django.contrib.postgres.search.CombinedSearchVector(
                            django.contrib.postgres.search.SearchVector(
                                'name', config='english', weight='A'
                            ),
                            '||',
                            django.contrib.postgres.search.SearchVector(
                                'description', config='english', weight='B'
                            ),
                            django.contrib.postgres.search.SearchConfig('english'),
                        ),
                        '||',
                        django.contrib.postgres.search.SearchVector(
                            'prereqs', config='english', weight='B'
                        ),
                        django.contrib.postgres.search.SearchConfig('english'),
                    ),
                    '||',
                    django.contrib.postgres.search.SearchVector(
                        'activity', 'trip_type', config='english', weight='C'
                    ),
                    django.contrib.postgres.search.SearchConfig('english'),
                ),
                name='search_vector_idx',
            ),
        ),
        migrations.AlterField(
            model_name='membershipreminder',
            name='participant',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to='ws.participant'
            ),
        ),
        migrations.AlterField(
            model_name='membershipreminder',
            name='reminder_sent_at',
            field=models.DateTimeField(
                blank=True,
                null=True,
                verbose_name='Last time an email was sent reminding this participant to renew',
            ),
        ),
        migrations.AddConstraint(
            model_name='membershipreminder',
            constraint=models.UniqueConstraint(
                condition=models.Q(('reminder_sent_at__isnull', True)),
                fields=('participant',),
                name='ws_membershipreminder_par_reminder_sent_at_uniq',
            ),
        ),
        migrations.AlterField(
            model_name='discount',
            name='url',
            field=models.URLField(blank=True, default=''),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='car',
            name='year',
            field=models.PositiveIntegerField(
                validators=[
                    django.core.validators.MaxValueValidator(2025),
                    django.core.validators.MinValueValidator(1903),
                ]
            ),
        ),
    ]
